name: Deploy Java App to Private EC2

on:
  push:
    branches:
      - java-deploy-github-actions

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Maven
        run: mvn clean package

      - name: Connect to Bastion and Deploy to Target EC2
        env:
          BASTION_HOST: 43.205.139.186 #13.232.207.168 #${{ secrets.BASTION_HOST }}  # Public IP or DNS of the Bastion
          BASTION_USER: ec2-user #${{ secrets.BASTION_USER }}  # User for the Bastion host
          BASTION_PRIVATE_KEY: ${{ secrets.BASTION_PVT_KEY }}  # Private key for the Bastion host
          TARGET_HOST: 11.0.3.34 #${{ secrets.TARGET_HOST }}  # Private IP of the target EC2
          TARGET_HOST_1: ${{ vars.TARGET_HOST_1 }}
          TARGET_USER: ec2-user #${{ secrets.TARGET_USER }}  # User for the target EC2
          #TARGET_KEY: ${{ secrets.BASTION_PVT_KEY }}  # Private key for the target instance
          TARGET_KEY: "/home/ec2-user/vpc-endpoint.pem" 
        run: |
          printenv
          mkdir -p ~/.ssh
          echo "${BASTION_PRIVATE_KEY}" > ~/.ssh/bastion_key.pem
          chmod 600 ~/.ssh/bastion_key.pem
          echo "connecting to bastion"
          echo " target host is $TARGET_HOST_1"
          # Copy the built JAR file to the target EC2 instance via Bastion
          ssh -i ~/.ssh/bastion_key.pem -o StrictHostKeyChecking=no ${BASTION_USER}@${TARGET_HOST_1} << 'EOF'
            # Create necessary directories on target instance
            echo "connecting to target"
            ssh -i "${TARGET_KEY}" -o StrictHostKeyChecking=no ${TARGET_USER}@${TARGET_HOST} "mkdir -p /var/www/my-app/"
            echo "copying jar from runner to target ec2"
            scp -i "${TARGET_KEY}" -o StrictHostKeyChecking=no /home/runner/work/rowdyrinkii/rowdy-java-application-microservice-1/target/*.jar ${TARGET_USER}@${TARGET_HOST}:/var/www/my-app/
            ssh -i "${TARGET_KEY}" -o StrictHostKeyChecking=no ${TARGET_USER}@${TARGET_HOST} "java -jar /var/www/my-app/your-app.jar &"
          EOF
